---
layout: reveal
title: "JavaOne 2012 | Testing JSF applications with Arquillian and Selenium"
---

%section
  %img.splash{:src => "assets/jbosscommunity/splash_text.png"}
%section
  %h1 Testing JSF applications
  %h2.capitalize with Arquillian and Selenium
  %ul.intro
    %li Brian Leathem
    %li Senior Software Engineer, Red Hat
    %li JAX - San Francisco
    %li 2012-07-09
%section
  %h2 The plan
  %ul
    %li Testing Overview
    %li Testing the Back-end
    %li Testing the Front-end
  %div
    %img{:src => "assets/images/storm_troopers.jpg", :alt => "http://www.flickr.com/photos/jdhancock/5845280258/", :style => "clear: both"}
%section
  %h2 Who am I?
  %ul
    %li Senior Software Engineer at Red Hat
    %li RichFaces Project Lead
    %li Represent Red Hat on the JSF 2.2 EG (JSR-344)
    %li Seam Faces module lead
  %div
    %img{:src => "assets/images/silhouette.png", :alt => "http://leslycorazon.wikispaces.com/file/detail/head-silhouette-with-question-mark.png/319199232"}
%section
  %h2 Who are you?
  %div
    %img.plain{:src => "assets/images/crowd.png"}
  .notes
    %ul
      %li Who currently develops web applications with JSF?
      %li Who is using Arquillian to test their application logic?
      %li Who is using Selenium to test their application front-end?
%section
  %h2 Arquillian review
  %div{:style => "float:left"}
    %img.plain{:src => "assets/images/arquillian_ike.png"}
    %h4 Don't mock me!
  %ul.bullets.relative{:style => "top: 100px; left: 20px"}
    %li Container integration
    %li Bring the container to the test
    %li Real tests
    %li Micro-deployments
%section
  %h2 Back-end testing
  %img.plain{:src => "assets/images/check.png", :style => "float:left"}
  %ul.relative{:style => "top: 150px; left: 20px"}
    %li A well understood problem
%section
  %h2 Back-end testing | Unit tests
  %img.plain.relative{:src => "assets/images/masks.png", :style => "float:left; top: 50px"}
  %div.relative{:style => "top: 100px"}
    %h4 JUnit / TestNG
    %ul.bullets{:style => "width: 500px"}
      %li Easy to test self-contained logic
      %li Mocks allow us to extend unit tests further
%section
  %h2 Back-end testing | "Real" tests
  %ul
    %li Arquillian
    %li run tests in the server
%section
  %h2 Anti-pattern: Ice-cream Cone of test coverage
  %div
    %img{:src => "assets/images/softwaretestingicecreamconeantipattern.png", :alt => "http://watirmelon.files.wordpress.com/2012/01/softwaretestingicecreamconeantipattern.png", :style => "clear: both"}
%section
  %h2 Ideal case: Ice-cream Cone of test coverage
  %div
    %img{:src => "assets/images/idealautomatedtestingpyramid.png", :alt => "http://watirmelon.files.wordpress.com/2012/01/idealautomatedtestingpyramid.png", :style => "clear: both"}
%section
  %h2 Howto increase automated test coverage?
  %ul
    %li Unit tests of GUI code would neat lots of mocks
    %li We want to focus on real-tests
%section
  %h2 Selenium
  %ul
    %li Test against lots of browsers w/ unified API
    %li Headless testing via html unit
%section
  %h2 Selenium IDE - Easy!
  %ul
    %li Easy to write/record tests
    %li replay tests against all browsers
%section
  %h2 Selenium - Problems!
  %ul
    %li No abstraction - highly repetitive
    %li Maintenance problem
    %li Tests focus against state transitions
    %li Test only DOM/CSS expressed directly in the test
%section
  %h2 JS Testing
  %ul
    %li Another avenue for testing client-side interaction
%section
  %h2 JS testing | Frameworks
  %ul
    %li QUnit
    %li Jasmine
    %li JsMockito
%section
  %h2 JS testing | Test runners
  %ul
    %li JSTD
    %li Selenium
    %li Maven
%section
  %h2 JS testing
  %ul
    %li How to re-use container setup of our functional tests?
%section
  %h2 Automating Client-side testing
  %ul
    %li Deploy the app, run the tests!
%section
  %h2 Deployment
  %ul
    %li Already solved by arquillian!
%section
  %h2 Arquillian Extensions
  %dl
    %dt Arquillian Drone
    %dd Brings the browser to the test
    %dt Arquillian Graphene
    %dd Type-safe API to Selnium
    %dt Arquillian Warp
    %dd Testing on both sides of the request
%section
  %h2 Arquillian Drone
  %ul
    %li Manages the life-cycle of objects required for interaction between browser and deployed application
    %li
      Integrates with:
      %ul
        %li Arquillian Graphene
        %li Selenium/Webdriver
  %pre{:class => "prettyprint"}
    %code
      &nbsp;
      :escaped
        @Drone
        FirefoxDriver browser
%section
  %h2 Separation of concerns
  %ul
    %li Devs focus on authoring tests
    %li QA focus on automating tests
%section
  %h2 Arquillian Graphene
  %ul
    %li Provides a type-safe API to selenium
    %li proven to handle AJAX
    %li Page Extensions
    %li Interceptors
%section
  %h2 Type-safe API to selenium
  %ul
    %li GrapheneSelenium class is type-safe equivalent of Selenium class in Selenium 1.x
  %pre{:class => "prettyprint"}
    %code
      &nbsp;
      :escaped
        @Drone
        GrapheneSelenium browser;
%section
  %h2 Ajax with Graphene
  %ul
    %li jQuery selectors
    %li
      Request guards
      %ul
        %li guardXhr(button).click();
        %li guardHttp(button).click();
%section
  %h2 Page Extensions
  %ul
    %li Represent the JavaScript extensions on the tested page
    %li Follow on to the Page Objects Selenium Pattern
  %pre{:class => "prettyprint"}
    %code
      &nbsp;
      :escaped
        @JavaScript("window")
%section
  %h2 Page objects Pattern | Review
  %ul
    %li Write one class per page
    %li Encapsulates behaviour of the page
    %li Write an API that supports page transitions
    %li Not suitable for AJAX
%section
  %h2 Ajax w/ Page Extensions
  %ul
    %li build tests out of components (rhater than pages)
  %pre{:class => "prettyprint"}
    %code
      &nbsp;
      :escaped
        @FindBy(id="form:calendar")
        Calendar calendar
  %pre{:class => "prettyprint"}
    %code
      &nbsp;
      :escaped
        @Component
        public class Calendar {
            @Root
            WebElement driver;
            ....
        }
%section
  %h2 Interceptors with Graphene
  %ul
    %li Cross-cutting concerns
%section
  %h2 Arquillian Warp
  %ul
    %li Testing on both sides of the request
    %li En-rich the client request with a test to run on the server
    %li En-rich the server response with results of the test
%section
  %h2 JSFUnit | the old way
  %ul
    %li HtmlUnit
    %li Assert state only at the end of the JSF lifecycle
    %li JSF Only (No CDI, EJB etc.)
%section
  %h2 Warp = JSFUnit.NG
  %ul
    %li Selenium / any other HTTP client
    %li serialize the test, return result
    %li Test the entire lifecycle
    %li
      Any injectable resource
      %ul
        %li CDI
        %li EJB
        %li Any framework!
%section
  %h2 Reducing test development turnaround
  %ul
    %li Re-usable Browser Session
    %li Arquillian jRebel extension
    %li sharing deployments across tests
%section
  %h2 The end?
  %h3.fragment{:style => "margin-top: 160px"} The beginning - of JSF testing adventure with Arquillian and Selenium!
%section
  %h2 Credits
  %ul.links
    %li
      %a{:href => "http://www.flickr.com/photos/jdhancock/5845280258/"} http://www.flickr.com/photos/jdhancock/5845280258/
    .links.commons
      :plain
        <a rel="license" href="http://creativecommons.org/licenses/by-nc-sa/3.0/"><img alt="Creative Commons Licence" style="border-width:0" src="http://i.creativecommons.org/l/by-nc-sa/3.0/88x31.png" /></a><br /><span xmlns:dct="http://purl.org/dc/terms/" property="dct:title">GOING MOBILE With Your RichFaces Applications</span> by <a xmlns:cc="http://creativecommons.org/ns#" href="www.bleathem.ca/talks/2012-JBW/richfaces-mobile.html" property="cc:attributionName" rel="cc:attributionURL">Brian Leathem</a> is licensed under a <a rel="license" href="http://creativecommons.org/licenses/by-nc-sa/3.0/">Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License</a>.<br />Based on a work at <a xmlns:dct="http://purl.org/dc/terms/" href="https://github.com/bleathem/talks/tree/master/2012-JBW" rel="dct:source">github.com</a>.<br />Permissions beyond the scope of this license may be available at <a xmlns:cc="http://creativecommons.org/ns#" href="https://github.com/bleathem/talks/tree/master/2012-JBW" rel="cc:morePermissions">https://github.com/bleathem/talks/tree/master/2012-JBW</a>.
%section
  %h2 Additional Resources
%section
  %h2 Other Arquillian session @ JavaOne
  %ul
    %li
    %li
    %li
%section
  %h2 Stay in the loop
  %ul.links.loop
    %li
      Project website:
      %ul
        %li
          %a{:href => "http://arquillian.org"} http://arquillian.org
        %li
          %a{:href => "http://richfaces.org"} http://richfaces.org
    %li
      Twitter:
      %ul
        %li
          %a{:href => "https://twitter.com/#!arquillian"} @arquillian
        %li
          %a{:href => "https://twitter.com/#!richfaces"} @richfaces
    %li
      Google+:
      %ul
        %li
          %a{:href => "https://plus.google.com/100660127586085393031/"} +Arquillian
        %li
          %a{:href => "https://plus.google.com/b/115573055688754345457/"} +RichFaces
    %li
      Forums:
      %ul
        %li
          %a{:href => "https://community.jboss.org/en/arquillian?view=discussions"} Arquillian User forum
        %li
          %a{:href => "https://community.jboss.org/en/richfaces?view=discussions"} RichFaces User forum
    %li
      Blog feed:
      %ul
        %li
          %a{:href => "http://arquillian.org/blog/"} http://arquillian.org/blog/
        %li
          %a{:href => "http://planet.jboss.org/feed/richfacesall"} http://planet.jboss.org/feed/richfacesall
    %li
      IRC
      %ul
        %li IRC: #jbosstesting
        %li IRC: #richfaces
