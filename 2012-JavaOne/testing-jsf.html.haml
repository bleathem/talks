---
layout: reveal
title: "JavaOne 2012 | Testing JSF applications with Arquillian and Selenium"
---

%section
  %img.splash{:src => "assets/jbosscommunity/splash_text.png"}
%section
  %h1 Testing JSF applications
  %h2.capitalize with Arquillian and Selenium
  %ul.intro
    %li Brian Leathem
    %li Senior Software Engineer, Red Hat
    %li JAX - San Francisco
    %li 2012-07-09
%section
  %section
    %h2 The plan
    %ul
      %li Testing Overview
      %li Testing the Back-end
      %li Testing the Front-end
    %div
      %img{:src => "assets/images/storm_troopers.jpg", :alt => "http://www.flickr.com/photos/jdhancock/5845280258/", :style => "clear: both"}
  %section
    %h2 Who am I?
    %ul
      %li Senior Software Engineer at Red Hat
      %li RichFaces Project Lead
      %li Represent Red Hat on the JSF 2.2 EG (JSR-344)
      %li Seam Faces module lead
    %div
      %img{:src => "assets/images/silhouette.png", :alt => "http://leslycorazon.wikispaces.com/file/detail/head-silhouette-with-question-mark.png/319199232"}
  %section
    %h2 Who are you?
    %div
      %img.plain{:src => "assets/images/crowd.png"}
    .notes
      %ul
        %li Who currently develops web applications with JSF?
        %li Who is using Arquillian to test their application logic?
        %li Who is using Selenium to test their application front-end?
%section
  %section
    %h2 Back-end testing
    %img.plain{:src => "assets/images/check.png", :style => "float:left"}
    %ul.relative{:style => "top: 150px; left: 20px"}
      %li A well understood problem
  %section
    %h2 Back-end testing | Unit tests
    %img.plain.relative{:src => "assets/images/masks.png", :style => "float:left; top: 50px"}
    %div.relative{:style => "top: 100px"}
      %h4 JUnit / TestNG
      %ul.bullets{:style => "width: 500px"}
        %li Easy to test self-contained logic
        %li Mocks allow us to extend unit tests further
  %section
    %h2 Back-end testing | "Real" tests
    %img.plain.relative{:src => "assets/images/testing-tags.png", :style => "float:left; top: 50px"}
    %div.relative{:style => "top: 100px"}
      %h4 "Real tests"
      %ul.bullets
        %li Test code in-container
        %li No "surprises" in production
  %section
    %h2 Enter Arquillian
    %div{:style => "float:left"}
      %img.plain{:src => "assets/images/arquillian_ike.png"}
      %h4 Don't mock me!
    %ul.bullets.relative{:style => "top: 100px; left: 20px"}
      %li Bring the container to the test
      %li Micro-deployments
%section
  %section
    %h2 Example | Greeter
    %div.relative{:style => "top: 100px"}
      %h1{:style => "float: left; font-size: 120pt"}
        Hello
        %br
        World!
      %ul.bullets.relative{:style => "top: 60px"}
        %li Basic Arquillian test
        %li Demonstrate @Inject
        %li Introduce Shrinkwrap
  %section
    %h2 Greeter | The Bean
    %pre{:class => "prettyprint", :style => "font-size: 18px"}
      %code{:id => "greeter"}
        &nbsp;
        :escaped
          public class Greeter {

              private PhraseBuilder phraseBuilder;

              @Inject
              public Greeter(PhraseBuilder phraseBuilder) {
                  this.phraseBuilder = phraseBuilder;
              }

              public void greet(PrintStream to, String name) {
                  to.println(createGreeting(name));
              }

              public String createGreeting(String name) {
                  return phraseBuilder.buildPhrase("hello", name);
              }
          }
        &nbsp;
  %section
    %h2 Greeter | Injection
    %pre{:class => "prettyprint", :style => "font-size: 18px"}
      %code{:id => "phraseBuilder"}
        &nbsp;
        :escaped
          public class PhraseBuilder {
              private Map<String, String> templates;

              public String buildPhrase(String id, Object... args) {
                  return MessageFormat.format(templates.get(id), args);
              }

              @PostConstruct
              public void initialize() {
                  templates = new HashMap<String, String>();
                  templates.put("hello", "Hello, {0}!");
              }
          }
        &nbsp;
  %section
    %h2 Greeter | Test
    %pre{:class => "prettyprint", :style => "font-size: 15px"}
      %code{:id => "basicTest"}
        &nbsp;
        :escaped
          @RunWith(Arquillian.class)
          public class GreeterTest {
              @Deployment
              public static JavaArchive createDeployment() {
                  JavaArchive jar = ShrinkWrap.create(JavaArchive.class)
                      .addClasses(Greeter.class, PhraseBuilder.class)
                      .addAsManifestResource(EmptyAsset.INSTANCE, "beans.xml");
                  return jar;
              }

              @Inject
              Greeter greeter;

              @Test
              public void should_create_greeting() {
                  Assert.assertEquals("Hello, Earthling!",
                      greeter.createGreeting("Earthling"));
              }
          }
        &nbsp;
    .fragment.screen{:data=>{:prettify=>"basicTest", :prettify_lines=>"1:1"}}
    .fragment.screen{:data=>{:prettify=>"basicTest", :prettify_lines=>"3:9"}}
    .fragment.screen{:data=>{:prettify=>"basicTest", :prettify_lines=>"11:12"}}
    .fragment.screen{:data=>{:prettify=>"basicTest", :prettify_lines=>"14:18"}}
  %section
    %h2 The Magic
    %ul
      %li
        POM Dependencies
        %ul
          %li Arquillian
          %li JUnit | TestNG
          %li Deployment Container
      %li &nbsp;
      %li
        Arquillian.xml
        %ul
          %li Configuration of the test container
  %section
    %h2 Greeter | POM
    %pre{:class => "prettyprint", :style => "font-size: 17px"}
      %code{:id => "basicTest"}
        &nbsp;
        :escaped
          <profile>
              <id>arquillian-jbossas-managed</id>
              <dependencies>
                  ...
                  <dependency>
                      <groupId>org.jboss.as</groupId>
                      <artifactId>jboss-as-arquillian-container-managed</artifactId>
                      <version>7.1.1.Final</version>
                      <scope>test</scope>
                  </dependency>

                  <dependency>
                      <groupId>org.jboss.arquillian.protocol</groupId>
                      <artifactId>arquillian-protocol-servlet</artifactId>
                      <scope>test</scope>
                  </dependency>

              </dependencies>
          </profile>
        &nbsp;
%section
  %section
    %h2 Front-end Testing
    %img.plain{:src => "assets/images/user.png"}
  %section
    %h2 Ideal: Pyramid of test coverage
    %div
      %img{:src => "assets/images/idealautomatedtestingpyramid.png", :alt => "http://watirmelon.files.wordpress.com/2012/01/idealautomatedtestingpyramid.png", :style => "clear: both"}
  %section
    %h2 Reality: Ice-cream Cone of test coverage
    %div
      %img{:src => "assets/images/softwaretestingicecreamconeantipattern.png", :alt => "http://watirmelon.files.wordpress.com/2012/01/softwaretestingicecreamconeantipattern.png", :style => "clear: both"}
  %section
    %h2 Howto increase automated test coverage?
    %ul
      %li &nbsp;
      %li
        Unit tests of GUI code
        %span{:style => "margin-left: 20px; font-weight: bold"} -- lots of mocks!
      %li &nbsp;
      %li Let's focus on real-tests
%section
  %section
    %h2 Real tests &rarr; real browsers
    .images.white{:style => "margin-top: 50px"}
      %table
        %tr
          %td
            %img.relative{:src => "assets/images/browsers/firefox.png", :style => "left: 50px"}
          %td
            %img.relative{:src => "assets/images/browsers/chrome.png", :style => "top: -50px"}
          %td
            %img.relative{:src => "assets/images/browsers/ie.png", :style => "left: -50px"}
        %tr
          %td
            %img.relative{:src => "assets/images/browsers/opera.png"}
          %td
            %img.relative{:src => "assets/images/browsers/safari.jpg"}
          %td
            %img.relative{:src => "assets/images/browsers/konqueror.png"}
        %tr
          %td
            %img.relative{:src => "assets/images/browsers/epiphany.png", :style => "left: 50px"}
          %td
            %img.relative{:src => "assets/images/browsers/camino.png", :style => "top: 50px"}
          %td
            %img.relative{:src => "assets/images/browsers/seamonkey.png", :style => "left: -50px"}

  %section
    %h2 Selenium
    %div.relative{:style => "top: 30px"}
      %img.plain{:src => "assets/images/selenium.png", :style => "float:left"}
      %ul.bullets.relative{:style => "top: 120px; width: 500px"}
        %li Test against lots of browsers w/ unified API
        %li Headless testing via html unit
  %section
    %h2 Selenium IDE - Easy!
    %div.relative{:style => "top: 30px"}
      %img.plain{:src => "assets/images/selenium-ide.png", :style => "float:left"}
      %ul.bullets.relative{:style => "top: 120px; width: 500px"}
        %li Easy to write/record tests
        %li replay tests against all browsers
  %section
    %h2 Selenium - Problems!
    %div.relative{:style => "top: 10px"}
      %img.plain{:src => "assets/images/frustrated.jpg", :style => "float:left", :alt => "http://www.flickr.com/photos/cellardoorfilms/7620375702/"}
      %ul.bullets.relative{:style => "top: 120px; left: 20px"}
        %li No abstraction
        %li highly repetitive
        %li Maintenance problem
    .notes
      %ul
        %li Tests focus against state transitions
        %li Test only DOM/CSS expressed directly in the test
%section
  %section
    %h2 Automating Client-side testing
    %ul
      %li Deploy the app, run the tests!
    %div
      %img.plain{:src => "assets/images/assembly_line.jpg", :alt => "http://www.flickr.com/photos/pasukaru76/6893926948/"}

  %section
    %h2 Container lifecycle
    %div{:style => "float:left;"}
      %img.plain{:src => "assets/images/arquillian_success.png"}
      %h4 Ike's got us covered!
    %ul.bullets.relative{:style => "top: 100px; left: 20px; width: 450px; float:right"}
      %li Startup/shutdown the container
      %li Create the testable archive
      %li Deploy the application
  %section
    %h2 Client lifecycle?
    %ul
      %li Browser
  %section
    %h2 Arquillian Extensions
    %dl
      %dt Arquillian Drone
      %dd Brings the browser to the test
      %dt Arquillian Graphene
      %dd Type-safe API to Selnium
      %dt Arquillian Warp
      %dd Testing on both sides of the request
%section
  %section
    %h2 Arquillian Drone
    %ul
      %li
        Manages the life-cycle of objects required for interaction between browser and deployed application
        %ul
          %li Browser
          %li Selenium server
  %section
    %h2 Arquillian Drone
    %ul
      %li
        Integrates with:
        %ul
          %li Arquillian Graphene
          %li Selenium/Webdriver
    %pre{:class => "prettyprint", :style => "font-size: 30px"}
      %code
        &nbsp;
        :escaped
          @Drone
          FirefoxDriver browser
        &nbsp;
  %section
    %h2 Separation of concerns
    %ul
      %li Devs focus on authoring tests
      %li QA focus on automating tests
%section
  %section
    %h2 Arquillian Graphene
    %ul
      %li Provides a type-safe API to selenium
      %li proven to handle AJAX
      %li Page Extensions
      %li Interceptors
  %section
    %h2 Type-safe API to selenium
    %ul
      %li GrapheneSelenium class is type-safe equivalent of Selenium class in Selenium 1.x
    %pre{:class => "prettyprint"}
      %code
        &nbsp;
        :escaped
          @Drone
          GrapheneSelenium browser;
  %section
    %h2 Ajax with Graphene
    %ul
      %li jQuery selectors
      %li
        Request guards
        %ul
          %li guardXhr(button).click();
          %li guardHttp(button).click();
  %section
    %h2 Page Extensions
    %ul
      %li Represent the JavaScript extensions on the tested page
      %li Follow on to the Page Objects Selenium Pattern
    %pre{:class => "prettyprint"}
      %code
        &nbsp;
        :escaped
          @JavaScript("window")
  %section
    %h2 Page objects Pattern | Review
    %ul
      %li Write one class per page
      %li Encapsulates behaviour of the page
      %li Write an API that supports page transitions
      %li Not suitable for AJAX
  %section
    %h2 Ajax w/ Page Extensions
    %ul
      %li build tests out of components (rhater than pages)
    %pre{:class => "prettyprint"}
      %code
        &nbsp;
        :escaped
          @FindBy(id="form:calendar")
          Calendar calendar
    %pre{:class => "prettyprint"}
      %code
        &nbsp;
        :escaped
          @Component
          public class Calendar {
              @Root
              WebElement driver;
              ....
          }
  %section
    %h2 Interceptors with Graphene
    %ul
      %li Cross-cutting concerns
%section
  %section
    %h2 Arquillian Warp
    %ul
      %li Testing on both sides of the request
      %li En-rich the client request with a test to run on the server
      %li En-rich the server response with results of the test
  %section
    %h2 JSFUnit | the old way
    %ul
      %li HtmlUnit
      %li Assert state only at the end of the JSF lifecycle
      %li JSF Only (No CDI, EJB etc.)
  %section
    %h2 Warp = JSFUnit.NG
    %ul
      %li Selenium / any other HTTP client
      %li serialize the test, return result
      %li Test the entire lifecycle
      %li
        Any injectable resource
        %ul
          %li CDI
          %li EJB
          %li Any framework!
%section
  %h2 Reducing test development turnaround
  %ul
    %li Re-usable Browser Session
    %li Arquillian jRebel extension
    %li sharing deployments across tests
%section
  %section
    %h2 JS Testing
    %ul
      %li Another avenue for testing client-side interaction
  %section
    %h2 JS testing | Frameworks
    %ul
      %li QUnit
      %li Jasmine
      %li JsMockito
  %section
    %h2 JS testing | Test runners
    %ul
      %li JSTD
      %li Selenium
      %li Maven
  %section
    %h2 JS testing
    %ul
      %li How to re-use container setup of our functional tests?
%section
  %h2 The end?
  %h3.fragment{:style => "margin-top: 160px"} The beginning - of JSF testing adventure with Arquillian and Selenium!
%section
  %h2 Credits
  %ul.links
    %li
      %a{:href => "http://www.flickr.com/photos/jdhancock/5845280258/"} http://www.flickr.com/photos/jdhancock/5845280258/
    .links.commons
      :plain
        <a rel="license" href="http://creativecommons.org/licenses/by-nc-sa/3.0/"><img alt="Creative Commons Licence" style="border-width:0" src="http://i.creativecommons.org/l/by-nc-sa/3.0/88x31.png" /></a><br /><span xmlns:dct="http://purl.org/dc/terms/" property="dct:title">GOING MOBILE With Your RichFaces Applications</span> by <a xmlns:cc="http://creativecommons.org/ns#" href="www.bleathem.ca/talks/2012-JBW/richfaces-mobile.html" property="cc:attributionName" rel="cc:attributionURL">Brian Leathem</a> is licensed under a <a rel="license" href="http://creativecommons.org/licenses/by-nc-sa/3.0/">Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License</a>.<br />Based on a work at <a xmlns:dct="http://purl.org/dc/terms/" href="https://github.com/bleathem/talks/tree/master/2012-JBW" rel="dct:source">github.com</a>.<br />Permissions beyond the scope of this license may be available at <a xmlns:cc="http://creativecommons.org/ns#" href="https://github.com/bleathem/talks/tree/master/2012-JBW" rel="cc:morePermissions">https://github.com/bleathem/talks/tree/master/2012-JBW</a>.
%section
  %h2 Additional Resources
%section
  %h2 Other Arquillian session @ JavaOne
  %ul
    %li
    %li
    %li
%section
  %h2 Stay in the loop
  %ul.links.loop
    %li
      Project website:
      %ul
        %li
          %a{:href => "http://arquillian.org"} http://arquillian.org
        %li
          %a{:href => "http://richfaces.org"} http://richfaces.org
    %li
      Twitter:
      %ul
        %li
          %a{:href => "https://twitter.com/#!arquillian"} @arquillian
        %li
          %a{:href => "https://twitter.com/#!richfaces"} @richfaces
    %li
      Google+:
      %ul
        %li
          %a{:href => "https://plus.google.com/100660127586085393031/"} +Arquillian
        %li
          %a{:href => "https://plus.google.com/b/115573055688754345457/"} +RichFaces
    %li
      Forums:
      %ul
        %li
          %a{:href => "https://community.jboss.org/en/arquillian?view=discussions"} Arquillian User forum
        %li
          %a{:href => "https://community.jboss.org/en/richfaces?view=discussions"} RichFaces User forum
    %li
      Blog feed:
      %ul
        %li
          %a{:href => "http://arquillian.org/blog/"} http://arquillian.org/blog/
        %li
          %a{:href => "http://planet.jboss.org/feed/richfacesall"} http://planet.jboss.org/feed/richfacesall
    %li
      IRC
      %ul
        %li IRC: #jbosstesting
        %li IRC: #richfaces
