{
    "project": {
        "name": "richfaces-widgets",
        "description": "Standalone javascript widgets",
        "logo": "../logo.png",
        "version": "0.1.1-wip",
        "url": "http://richwidgets.io"
    },
    "files": {
        "src/widgets/input/autocomplete.js": {
            "name": "src/widgets/input/autocomplete.js",
            "modules": {
                "Input": 1
            },
            "classes": {
                "autocomplete": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/widgets/input/editor.js": {
            "name": "src/widgets/input/editor.js",
            "modules": {},
            "classes": {
                "editor": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/widgets/input/select.js": {
            "name": "src/widgets/input/select.js",
            "modules": {},
            "classes": {
                "select": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/widgets/output/chart.js": {
            "name": "src/widgets/output/chart.js",
            "modules": {
                "Output": 1
            },
            "classes": {
                "chart": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/widgets/output/stopwatch.js": {
            "name": "src/widgets/output/stopwatch.js",
            "modules": {},
            "classes": {
                "stopwatch": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/widgets/select/ordering-list.js": {
            "name": "src/widgets/select/ordering-list.js",
            "modules": {
                "Select": 1
            },
            "classes": {
                "orderingList": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/widgets/select/pick-list.js": {
            "name": "src/widgets/select/pick-list.js",
            "modules": {},
            "classes": {
                "pickList": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/widgets/table/data-scroller.js": {
            "name": "src/widgets/table/data-scroller.js",
            "modules": {
                "Table": 1
            },
            "classes": {
                "dataScroller": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/widgets/table/data-table.js": {
            "name": "src/widgets/table/data-table.js",
            "modules": {},
            "classes": {
                "dataTable": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/widgets/table/sub-table-toggle.js": {
            "name": "src/widgets/table/sub-table-toggle.js",
            "modules": {},
            "classes": {
                "subTableToggle": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/widgets/table/sub-table.js": {
            "name": "src/widgets/table/sub-table.js",
            "modules": {},
            "classes": {
                "subTable": 1
            },
            "fors": {},
            "namespaces": {}
        }
    },
    "modules": {
        "Input": {
            "name": "Input",
            "submodules": {},
            "classes": {
                "autocomplete": 1,
                "editor": 1,
                "select": 1
            },
            "fors": {},
            "namespaces": {},
            "tag": "module",
            "file": "src/widgets/input/select.js",
            "line": 1,
            "description": "Autocomplete enables users to quickly find and select from a pre-populated list of values as they type, leveraging searching and filtering.\n\nThe widget is based on popular jQuery UI Autocomplete widget, but it brings some advanced built-in features:\n\n* caching\n* tokenizing\n* using DOM as a source of suggestions\n* auto-fill\n* built-in button",
            "uses": [
                "$.ui.autocomplete"
            ]
        },
        "Output": {
            "name": "Output",
            "submodules": {},
            "classes": {
                "chart": 1,
                "stopwatch": 1
            },
            "fors": {},
            "namespaces": {},
            "tag": "module",
            "file": "src/widgets/output/stopwatch.js",
            "line": 1,
            "description": "A widget for creating data chart"
        },
        "Select": {
            "name": "Select",
            "submodules": {},
            "classes": {
                "orderingList": 1,
                "pickList": 1
            },
            "fors": {},
            "namespaces": {},
            "tag": "module",
            "file": "src/widgets/select/pick-list.js",
            "line": 1,
            "description": "A widget providing sorting capabilities for a list of elements"
        },
        "Table": {
            "name": "Table",
            "submodules": {},
            "classes": {
                "dataScroller": 1,
                "dataTable": 1,
                "subTableToggle": 1,
                "subTable": 1
            },
            "fors": {},
            "namespaces": {},
            "tag": "module",
            "file": "src/widgets/table/sub-table.js",
            "line": 1,
            "description": "A widget for paging through other iterating widgets"
        }
    },
    "classes": {
        "autocomplete": {
            "name": "autocomplete",
            "shortname": "autocomplete",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Input",
            "namespace": "",
            "file": "src/widgets/input/autocomplete.js",
            "line": 1,
            "description": "Autocomplete enables users to quickly find and select from a pre-populated list of values as they type, leveraging searching and filtering.\n\nThe widget is based on popular jQuery UI Autocomplete widget, but it brings some advanced built-in features:\n\n* caching\n* tokenizing\n* using DOM as a source of suggestions\n* auto-fill\n* built-in button"
        },
        "editor": {
            "name": "editor",
            "shortname": "editor",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Input",
            "namespace": "",
            "file": "src/widgets/input/editor.js",
            "line": 2,
            "description": "Editor widget for powerfull WYSIWYG editor based on CKEditor 4.\n\nFor various options check documentation for CKEditor: http://docs.ckeditor.com/\n\n(You can pass the same options to the widget options as you would pass in CKEditor config / options.)"
        },
        "select": {
            "name": "select",
            "shortname": "select",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Input",
            "namespace": "",
            "file": "src/widgets/input/select.js",
            "line": 1
        },
        "chart": {
            "name": "chart",
            "shortname": "chart",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Output",
            "namespace": "",
            "file": "src/widgets/output/chart.js",
            "line": 1,
            "description": "A widget for creating data chart"
        },
        "stopwatch": {
            "name": "stopwatch",
            "shortname": "stopwatch",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Output",
            "namespace": "",
            "file": "src/widgets/output/stopwatch.js",
            "line": 1,
            "description": "A stopwatch widget that can operate in either an 'increasing' mode (a stopwatch)\nor in a 'decreasing' mode (a timer)."
        },
        "orderingList": {
            "name": "orderingList",
            "shortname": "orderingList",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Select",
            "namespace": "",
            "file": "src/widgets/select/ordering-list.js",
            "line": 1,
            "description": "A widget providing sorting capabilities for a list of elements"
        },
        "pickList": {
            "name": "pickList",
            "shortname": "pickList",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Select",
            "namespace": "",
            "file": "src/widgets/select/pick-list.js",
            "line": 1,
            "description": "A widget providing selection and sorting capabilities for a list of elements"
        },
        "dataScroller": {
            "name": "dataScroller",
            "shortname": "dataScroller",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Table",
            "namespace": "",
            "file": "src/widgets/table/data-scroller.js",
            "line": 1,
            "description": "A widget for paging through other iterating widgets"
        },
        "dataTable": {
            "name": "dataTable",
            "shortname": "dataTable",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Table",
            "namespace": "",
            "file": "src/widgets/table/data-table.js",
            "line": 1,
            "description": "A widget providing hooks for sorting and filtering a data table."
        },
        "subTableToggle": {
            "name": "subTableToggle",
            "shortname": "subTableToggle",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Table",
            "namespace": "",
            "file": "src/widgets/table/sub-table-toggle.js",
            "line": 1,
            "description": "A widget providing hooks for sorting and filtering a data table."
        },
        "subTable": {
            "name": "subTable",
            "shortname": "subTable",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Table",
            "namespace": "",
            "file": "src/widgets/table/sub-table.js",
            "line": 1,
            "description": "A widget providing hooks for sorting and filtering a data table."
        }
    },
    "classitems": [
        {
            "file": "src/widgets/input/autocomplete.js",
            "line": 31,
            "description": "The delay in milliseconds between when a keystroke occurs and when a search is performed. A zero-delay makes sense for local data (more responsive), but can produce a lot of load for remote data, while being less responsive.",
            "itemtype": "property",
            "name": "delay",
            "type": "Integer",
            "default": "0",
            "class": "autocomplete",
            "module": "Input"
        },
        {
            "file": "src/widgets/input/autocomplete.js",
            "line": 40,
            "description": "Allows to repeat auto-completion several times by using separator between words.\n\nYou can provide multiple tokens.",
            "itemtype": "property",
            "name": "token",
            "type": "String",
            "default": "null",
            "class": "autocomplete",
            "module": "Input"
        },
        {
            "file": "src/widgets/input/autocomplete.js",
            "line": 51,
            "description": "Allows to append a button to the input to allow opening suggestion box by mouse.",
            "itemtype": "property",
            "name": "showButton",
            "type": "Boolean",
            "default": "false",
            "class": "autocomplete",
            "module": "Input"
        },
        {
            "file": "src/widgets/input/autocomplete.js",
            "line": 60,
            "description": "Auto focusing mode selects first suggestion in a list once it appears, so user can just confirm it using enter key.",
            "itemtype": "property",
            "name": "autoFocus",
            "type": "Boolean",
            "default": "false",
            "class": "autocomplete",
            "module": "Input"
        },
        {
            "file": "src/widgets/input/autocomplete.js",
            "line": 69,
            "description": "Auto filling mode previews a selected suggestion in the input as a user types.",
            "itemtype": "property",
            "name": "autoFill",
            "type": "Boolean",
            "default": "false",
            "class": "autocomplete",
            "module": "Input"
        },
        {
            "file": "src/widgets/input/autocomplete.js",
            "line": 78,
            "description": "Defines the data to use, must be specified.\n\n**Multiple types supported:**\n\n* **Array:** An array can be used for local data.There are two supported formats:\n   * An array of strings: `[ \"Choice1\", \"Choice2\" ]`\n   * An array of objects with `label` and `value` properties: `[ { label: \"Choice1\", value: \"value1\" }, ... ]`\n\n   The label property is displayed in the suggestion menu. The value will be inserted into the input element when a user selects an item. If just one property is specified, it will be used for both, e.g., if you provide only value properties, the value will also be used as the label.\n\n* **String:** When a string is used, the Autocomplete plugin expects that string to point to a URL resource that will return JSON data. It can be on the same host or on a different one (must provide JSONP). The Autocomplete plugin does not filter the results, instead a query string is added with a term field, which the server-side script should use for filtering the results. For example, if the source option is set to \"http://example.com\" and the user types foo, a GET request would be made to http://example.com?term=foo. The data itself can be in the same format as the local data described above.\n\n* **Function:** The third variation, a callback, provides the most flexibility and can be used to connect any data source to Autocomplete. The callback gets two arguments:\n   * A request object, with a single term property, which refers to the value currently in the text input. For example, if the user enters \"new yo\" in a city field, the Autocomplete term will equal \"new yo\".\n   * A response callback, which expects a single argument: the data to suggest to the user. This data should be filtered based on the provided term, and can be in any of the formats described above for simple local data. It's important when providing a custom source callback to handle errors during the request. You must always call the response callback even if you encounter an error. This ensures that the widget always has the correct state.\n\n   When filtering data locally, you can make use of the built-in $.ui.autocomplete.escapeRegex function. It'll take a single string argument and escape all regex characters, making the result safe to pass to new RegExp().",
            "itemtype": "property",
            "name": "source",
            "required": 1,
            "class": "autocomplete",
            "module": "Input"
        },
        {
            "file": "src/widgets/input/autocomplete.js",
            "line": 102,
            "description": "The minimum number of characters a user must type before a search is performed. Zero is useful for local data with just a few items, but a higher value should be used when a single character search could match a few thousand items.",
            "itemtype": "property",
            "name": "minLength",
            "type": "Number",
            "default": "0",
            "class": "autocomplete",
            "module": "Input"
        },
        {
            "file": "src/widgets/input/autocomplete.js",
            "line": 111,
            "description": "Turns suggestions caching on.\n\nIn caching mode, autocomplete first tries to look suggestions for given term up in cache given by\n`cacheImplementation` option and if no suggestions are found, autocomplete uses classic `source`\nto retrieve suggestions.",
            "itemtype": "property",
            "name": "cached",
            "type": "Boolean",
            "default": "false",
            "class": "autocomplete",
            "module": "Input"
        },
        {
            "file": "src/widgets/input/autocomplete.js",
            "line": 124,
            "description": "Allows to plug in implementation of cache, which in turn allows to use stores like Local Storage\nfor remembering values.\n\n`cacheImplementation` is an class with two methods:\n\n- `function get(searchTerm)` - returns all cached suggestions for given searchTerm prefix\n- `function set(searchTerm, suggestions)` - stores all provided suggestions into cache under given searchTerm prefix",
            "itemtype": "property",
            "name": "cacheImplementation",
            "type": "Object",
            "default": "$.rich.autocomplete.ObjectCache",
            "class": "autocomplete",
            "module": "Input"
        },
        {
            "file": "src/widgets/input/autocomplete.js",
            "line": 139,
            "description": "Function that determines what prefix of search term will be used to query a cache:\n\n`function cachePrefixExtract(searchTerm)` - default implementation extracts first `minLength` characters of a search term",
            "itemtype": "property",
            "name": "cachePrefixExtract",
            "type": "Function",
            "default": "$.rich.autocomplete.cachePrefixExtract",
            "class": "autocomplete",
            "module": "Input"
        },
        {
            "file": "src/widgets/input/autocomplete.js",
            "line": 150,
            "description": "Provide function which will be used to filter array of suggestions by given searchTerm:\n\n`function filter(array, searchTerm)`",
            "itemtype": "property",
            "name": "filter",
            "type": "Function",
            "class": "autocomplete",
            "module": "Input"
        },
        {
            "file": "src/widgets/input/autocomplete.js",
            "line": 162,
            "description": "Which element the menu should be appended to. When the value is null, the parents of the input field will be checked for a class of ui-front. If an element with the ui-front class is found, the menu will be appended to that element. Regardless of the value, if no element is found, the menu will be appended to the body.",
            "itemtype": "property",
            "name": "appendTo",
            "type": "Selector",
            "default": "null",
            "class": "autocomplete",
            "module": "Input"
        },
        {
            "file": "src/widgets/input/autocomplete.js",
            "line": 171,
            "description": "Disables the autocomplete if set to true.",
            "itemtype": "property",
            "name": "disabled",
            "type": "Boolean",
            "default": "false",
            "class": "autocomplete",
            "module": "Input"
        },
        {
            "file": "src/widgets/input/autocomplete.js",
            "line": 180,
            "description": "Identifies the position of the suggestions menu in relation to the associated input element. The of option defaults to the input element, but you can specify another element to position against. You can refer to the jQuery UI Position utility for more details about the various options.",
            "itemtype": "property",
            "name": "position",
            "type": "Object",
            "default": "`{ my: \"left top\", at: \"left bottom\", collision: \"none\" }`",
            "class": "autocomplete",
            "module": "Input"
        },
        {
            "file": "src/widgets/input/autocomplete.js",
            "line": 191,
            "description": "Triggered when search is triggered but before raw suggestions are parsed/processed.\n\nIt gives chance to update `source` of suggestions as reflection to current search term.\n\nfunction update(request [, doneCallback])\n\n* `request` is object which contains search term: `{ term: 'searchTerm' }`\n* when `doneCallback` is provided, widget will wait until `doneCallback` is called. Usually it is called on the end of AJAX data update.",
            "itemtype": "event",
            "name": "update",
            "class": "autocomplete",
            "module": "Input"
        },
        {
            "file": "src/widgets/input/autocomplete.js",
            "line": 207,
            "description": "Triggered when the field is blurred, if the value has changed.",
            "itemtype": "event",
            "name": "change",
            "override": "",
            "class": "autocomplete",
            "module": "Input"
        },
        {
            "file": "src/widgets/input/autocomplete.js",
            "line": 216,
            "description": "Triggered when the menu is hidden. Not every close event will be accompanied by a change event.",
            "itemtype": "event",
            "name": "close",
            "class": "autocomplete",
            "module": "Input"
        },
        {
            "file": "src/widgets/input/autocomplete.js",
            "line": 223,
            "description": "Triggered when the autocomplete is created.",
            "itemtype": "event",
            "name": "create",
            "class": "autocomplete",
            "module": "Input"
        },
        {
            "file": "src/widgets/input/autocomplete.js",
            "line": 230,
            "description": "Triggered when focus is moved to an item (not selecting).\nThe default action is to replace the text field's value with the value of the focused item, though only if the event was triggered by a keyboard interaction.\nCanceling this event prevents the value from being updated, but does not prevent the menu item from being focused.",
            "itemtype": "event",
            "name": "focus",
            "class": "autocomplete",
            "module": "Input"
        },
        {
            "file": "src/widgets/input/autocomplete.js",
            "line": 239,
            "description": "Triggered when the suggestion menu is opened or updated.",
            "itemtype": "event",
            "name": "open",
            "class": "autocomplete",
            "module": "Input"
        },
        {
            "file": "src/widgets/input/autocomplete.js",
            "line": 246,
            "description": "Triggered after a search completes, before the menu is shown.\nUseful for local manipulation of suggestion data, where a custom source option callback is not required.\nThis event is always triggered when a search completes, even if the menu will not be shown because there are no results or the Autocomplete is disabled.",
            "itemtype": "event",
            "name": "response",
            "class": "autocomplete",
            "module": "Input"
        },
        {
            "file": "src/widgets/input/autocomplete.js",
            "line": 255,
            "description": "Triggered before a search is performed, after minLength and delay are met.\nIf canceled, then no request will be started and no items suggested.",
            "itemtype": "event",
            "name": "search",
            "class": "autocomplete",
            "module": "Input"
        },
        {
            "file": "src/widgets/input/autocomplete.js",
            "line": 263,
            "description": "Triggered when an item is selected from the menu.\nThe default action is to replace the text field's value with the value of the selected item.\nCanceling this event prevents the value from being updated, but does not prevent the menu from closing.",
            "itemtype": "event",
            "name": "select",
            "class": "autocomplete",
            "module": "Input"
        },
        {
            "file": "src/widgets/input/autocomplete.js",
            "line": 313,
            "description": "Closes the Autocomplete menu. Useful in combination with the search method, to close the open menu.",
            "itemtype": "method",
            "name": "close",
            "uses": [
                "$.ui.autocomplete"
            ],
            "class": "autocomplete",
            "module": "Input"
        },
        {
            "file": "src/widgets/input/autocomplete.js",
            "line": 322,
            "description": "Removes the autocomplete functionality completely. This will return the element back to its pre-init state.",
            "itemtype": "method",
            "name": "destroy",
            "class": "autocomplete",
            "module": "Input"
        },
        {
            "file": "src/widgets/input/autocomplete.js",
            "line": 329,
            "description": "Disables the autocomplete.",
            "itemtype": "method",
            "name": "disable",
            "class": "autocomplete",
            "module": "Input"
        },
        {
            "file": "src/widgets/input/autocomplete.js",
            "line": 336,
            "description": "Enables the autocomplete.",
            "itemtype": "method",
            "name": "enable",
            "class": "autocomplete",
            "module": "Input"
        },
        {
            "file": "src/widgets/input/autocomplete.js",
            "line": 343,
            "description": "`option( optionName )`\n\nGets an object containing key/value pairs representing the current autocomplete options hash.\n\n`option()`\n\nGets an object containing key/value pairs representing the current autocomplete options hash.\n\n`option( optionName, value )`\n\nSets the value of the autocomplete option associated with the specified optionName.\n\n`option( options )`\n\nSets one or more options for the autocomplete.",
            "itemtype": "method",
            "name": "option",
            "class": "autocomplete",
            "module": "Input"
        },
        {
            "file": "src/widgets/input/autocomplete.js",
            "line": 364,
            "description": "Triggers a search event and invokes the data source if the event is not canceled.\nCan be used by a selectbox-like button to open the suggestions when clicked.\nWhen invoked with no parameters, the current input's value is used.",
            "itemtype": "method",
            "name": "search",
            "params": [
                {
                    "name": "value",
                    "description": "optional",
                    "type": "String",
                    "optional": true
                }
            ],
            "class": "autocomplete",
            "module": "Input"
        },
        {
            "file": "src/widgets/input/autocomplete.js",
            "line": 374,
            "description": "Returns a jQuery object containing the menu element. Although the menu items are constantly created and destroyed, the menu element itself is created during initialization and is constantly reused.",
            "itemtype": "method",
            "name": "widget",
            "class": "autocomplete",
            "module": "Input"
        },
        {
            "file": "src/widgets/input/autocomplete.js",
            "line": 445,
            "override": "$.ui.autocomplete._initSource",
            "class": "autocomplete",
            "module": "Input"
        },
        {
            "file": "src/widgets/input/autocomplete.js",
            "line": 452,
            "override": "$.ui.autocomplete._renderMenu",
            "class": "autocomplete",
            "module": "Input"
        },
        {
            "file": "src/widgets/input/autocomplete.js",
            "line": 462,
            "override": "$.ui.autocomplete._renderItem",
            "class": "autocomplete",
            "module": "Input"
        },
        {
            "file": "src/widgets/input/autocomplete.js",
            "line": 488,
            "description": "callbacks for important jQuery UI Autocomplete events that helps to handle extension functionality",
            "class": "autocomplete",
            "module": "Input"
        },
        {
            "file": "src/widgets/input/editor.js",
            "line": 20,
            "description": "The toolbox (alias toolbar) definition. It is a toolbar name or an array of toolbars (strips), each one being also an array, containing a list of UI items.\n\nOtherwise the Editor widget share all options with the CKEditor 4 (http://docs.ckeditor.com/).",
            "itemtype": "property",
            "name": "toolbar",
            "type": "Integer",
            "default": "'Basic'",
            "class": "editor",
            "module": "Input"
        },
        {
            "file": "src/widgets/input/editor.js",
            "line": 31,
            "description": "Do not load config as it is loaded manually",
            "class": "editor",
            "module": "Input"
        },
        {
            "file": "src/widgets/input/editor.js",
            "line": 63,
            "description": "Returns CKEditor instance.",
            "itemtype": "method",
            "name": "editor",
            "class": "editor",
            "module": "Input"
        },
        {
            "file": "src/widgets/input/editor.js",
            "line": 72,
            "description": "Read or write editor's value:\n\n* value() - returns a current value\n* value(newValue) - setup a new value",
            "itemtype": "method",
            "name": "value",
            "class": "editor",
            "module": "Input"
        },
        {
            "file": "src/widgets/input/editor.js",
            "line": 88,
            "description": "Focus the editor",
            "itemtype": "method",
            "name": "focus",
            "class": "editor",
            "module": "Input"
        },
        {
            "file": "src/widgets/input/editor.js",
            "line": 97,
            "description": "Blur the editor",
            "itemtype": "method",
            "name": "blur",
            "class": "editor",
            "module": "Input"
        },
        {
            "file": "src/widgets/input/editor.js",
            "line": 106,
            "description": "Checks whether the editor is focused",
            "itemtype": "method",
            "name": "isFocused",
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "editor",
            "module": "Input"
        },
        {
            "file": "src/widgets/input/editor.js",
            "line": 116,
            "description": "Checks whether the editor value has changed since last focus event.",
            "itemtype": "method",
            "name": "isDirty",
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "editor",
            "module": "Input"
        },
        {
            "file": "src/widgets/input/editor.js",
            "line": 126,
            "description": "Checks whether the editor value has changed from its initial state.",
            "itemtype": "method",
            "name": "isValueChanged",
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "editor",
            "module": "Input"
        },
        {
            "file": "src/widgets/input/editor.js",
            "line": 136,
            "description": "Switches the editor to read-only mode or checks whether it is in read-only mode.\n\n* readOnly() - returns a value\n* readOnly(true) - switches the editor to read-only mode",
            "itemtype": "method",
            "name": "readOnly",
            "params": [
                {
                    "name": "readOnly",
                    "description": "optional",
                    "type": "Boolean",
                    "optional": true
                }
            ],
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "editor",
            "module": "Input"
        },
        {
            "file": "src/widgets/input/editor.js",
            "line": 157,
            "description": "Triggered when the Editor instance is fully initialized",
            "itemtype": "event",
            "name": "init",
            "class": "editor",
            "module": "Input"
        },
        {
            "file": "src/widgets/input/editor.js",
            "line": 163,
            "description": "Triggered when the Editor is blurred",
            "itemtype": "event",
            "name": "blur",
            "class": "editor",
            "module": "Input"
        },
        {
            "file": "src/widgets/input/editor.js",
            "line": 169,
            "description": "Triggered when the field is focused",
            "itemtype": "event",
            "name": "focus",
            "class": "editor",
            "module": "Input"
        },
        {
            "file": "src/widgets/input/editor.js",
            "line": 175,
            "description": "Triggered everytime the editors value changes.\n\nNote: beware, this event is fired for each single action user takes that changes the value",
            "itemtype": "event",
            "name": "dirty",
            "class": "editor",
            "module": "Input"
        },
        {
            "file": "src/widgets/input/editor.js",
            "line": 183,
            "description": "Triggered when the field is blurred, if the value has changed.",
            "itemtype": "event",
            "name": "change",
            "class": "editor",
            "module": "Input"
        },
        {
            "file": "src/widgets/output/chart.js",
            "line": 14,
            "description": "Specifies the type of chart.\nAccording to this property and xtypex ytype, proper default options corresponding to chart type\nare applied and data are transformed to the format expected by flot.\nFollowing values are supported: `line`,`bar`,`pie`\nOptions is not required. If it is not used the options and data format remains the same as flot uses by default.",
            "itemtype": "property",
            "name": "charttype",
            "default": "null",
            "class": "chart",
            "module": "Output"
        },
        {
            "file": "src/widgets/output/chart.js",
            "line": 25,
            "description": "Specify the data type of values plotted on x-axis\nFollowing options are supported: number,string,date",
            "itemtype": "property",
            "name": "xtype",
            "default": "null",
            "class": "chart",
            "module": "Output"
        },
        {
            "file": "src/widgets/output/chart.js",
            "line": 33,
            "description": "Specify the data type of values plotted on x-axis\nFollowing options are supported: number,string,date",
            "itemtype": "property",
            "name": "xtype",
            "default": "null",
            "class": "chart",
            "module": "Output"
        },
        {
            "file": "src/widgets/output/chart.js",
            "line": 41,
            "description": "Allows to zoom the chart. Supported only when line chart is used. Requires charttype to be set.",
            "itemtype": "property",
            "name": "zoom",
            "default": "false",
            "class": "chart",
            "module": "Output"
        },
        {
            "file": "src/widgets/output/chart.js",
            "line": 50,
            "description": "Options customizing the chart grid.",
            "type": "Object",
            "default": "{clickable:true, hoverable:true}",
            "itemtype": "property",
            "name": "grid",
            "class": "chart",
            "module": "Output",
            "subprops": [
                {
                    "name": "clickable",
                    "description": "\n  Grid accepts click events.",
                    "type": "Boolean"
                },
                {
                    "name": "hoverable",
                    "description": "\n  Grid fires mouseover event. Necessary for tooltip to work.",
                    "type": "Boolean"
                }
            ]
        },
        {
            "file": "src/widgets/output/chart.js",
            "line": 66,
            "description": "Turns on tooltip (text shown when mouse points to a part of a chart)",
            "itemtype": "property",
            "name": "tooltip",
            "type": "boolean",
            "default": "true",
            "class": "chart",
            "module": "Output"
        },
        {
            "file": "src/widgets/output/chart.js",
            "line": 74,
            "description": "Customizes the tooltip.",
            "type": "Object",
            "default": "{ content: '%s [%x,%y]'}",
            "itemtype": "property",
            "name": "tooltipOpts",
            "class": "chart",
            "module": "Output",
            "subprops": [
                {
                    "name": "content",
                    "description": "\n   Specify the tooltip format. Use %s for series label, %x for X values, %y for Y value",
                    "type": "String"
                },
                {
                    "name": "defaultTheme",
                    "description": ""
                }
            ]
        },
        {
            "file": "src/widgets/output/chart.js",
            "line": 92,
            "description": "Legend properties",
            "type": "Object",
            "default": "{postion:'ne', sorted: 'ascending'}",
            "itemtype": "property",
            "name": "legend",
            "class": "chart",
            "module": "Output",
            "subprops": [
                {
                    "name": "position",
                    "description": "\n   Defines the placement of the legend in the grid. One of ne,nw,se,sw",
                    "type": "String"
                },
                {
                    "name": "sorted",
                    "description": "\n   Defines the order of labels in the legend. One of ascending,descending,false.",
                    "type": "String"
                }
            ]
        },
        {
            "file": "src/widgets/output/chart.js",
            "line": 107,
            "description": "Customizes the horizontal axis",
            "type": "Object",
            "default": "{min: null, max: null,autoscaleMargin: null, axisLabel: ''}",
            "itemtype": "property",
            "name": "xaxis",
            "class": "chart",
            "module": "Output",
            "subprops": [
                {
                    "name": "min",
                    "description": "\n  Minimal value shown on axis",
                    "type": "Number"
                },
                {
                    "name": "max",
                    "description": "\n  Maximal values show on axis",
                    "type": "Number"
                },
                {
                    "name": "autoscaleMargin",
                    "description": "\n  It's the fraction of margin that the scaling algorithm will add\n  to avoid that the outermost points ends up on the grid border",
                    "type": "Number"
                },
                {
                    "name": "axisLabel",
                    "description": "\n  Axis description",
                    "type": "String"
                }
            ]
        },
        {
            "file": "src/widgets/output/chart.js",
            "line": 129,
            "description": "Customizes the vertical axis",
            "type": "Object",
            "default": "{min: null, max: null,autoscaleMargin: 0.2,axisLabel: ''}",
            "itemtype": "property",
            "name": "yaxis",
            "class": "chart",
            "module": "Output",
            "subprops": [
                {
                    "name": "min",
                    "description": "\n  Minimal value shown on axis",
                    "type": "Number"
                },
                {
                    "name": "max",
                    "description": "\n  Maximal values show on axis",
                    "type": "Number"
                },
                {
                    "name": "autoscaleMargin",
                    "description": "\n  It's the fraction of margin that the scaling algorithm will add to\n  avoid that the outermost points ends up on the grid border.",
                    "type": "Number"
                },
                {
                    "name": "axisLabel",
                    "description": "\n  Axis description",
                    "type": "String"
                }
            ]
        },
        {
            "file": "src/widgets/output/chart.js",
            "line": 154,
            "description": "Data to be plotted. The format is the same used by flot. The format may differ if the charttype\noption is set to pie or bar.",
            "itemtype": "property",
            "name": "data",
            "default": "[]",
            "class": "chart",
            "module": "Output"
        },
        {
            "file": "src/widgets/output/chart.js",
            "line": 297,
            "description": "Labels are mapped to numbers 0,1,2...\nIf a chart consists of multiple series values(from all series) with the same label\nare mapped to the (one number 0,1,2..) space of width 1.\nbarWidth takes care of bars to not overlap",
            "type": "{number}",
            "class": "chart",
            "module": "Output"
        },
        {
            "file": "src/widgets/output/chart.js",
            "line": 453,
            "description": "Redraw chart without axis ranges",
            "itemtype": "method",
            "name": "resetZoom",
            "class": "chart",
            "module": "Output"
        },
        {
            "file": "src/widgets/output/chart.js",
            "line": 463,
            "description": "Returns chart object",
            "itemtype": "method",
            "name": "getPlotObject",
            "class": "chart",
            "module": "Output"
        },
        {
            "file": "src/widgets/output/chart.js",
            "line": 472,
            "description": "Highlights the point in chart selected by seriesIndex or point index. Does not work for pie charts.",
            "params": [
                {
                    "name": "seriesIndex",
                    "description": "",
                    "type": "Int"
                },
                {
                    "name": "pointIndex",
                    "description": "",
                    "type": "Int"
                }
            ],
            "itemtype": "method",
            "name": "highlight",
            "class": "chart",
            "module": "Output"
        },
        {
            "file": "src/widgets/output/chart.js",
            "line": 481,
            "description": "Removes highlighting of point. If method is called without parameters it unhighlights all points.",
            "params": [
                {
                    "name": "seriesIndex",
                    "description": "",
                    "type": "Int"
                },
                {
                    "name": "pointIndex",
                    "description": "",
                    "type": "Int"
                }
            ],
            "itemtype": "method",
            "name": "unghighlight",
            "class": "chart",
            "module": "Output"
        },
        {
            "file": "src/widgets/output/chart.js",
            "line": 500,
            "description": "Removes the chart functionality completely. This will return the element back to its pre-init state.",
            "itemtype": "method",
            "name": "destroy",
            "class": "chart",
            "module": "Output"
        },
        {
            "file": "src/widgets/output/stopwatch.js",
            "line": 13,
            "description": "Whether to start the stopwatch on plugin execution",
            "itemtype": "property",
            "name": "autostart",
            "type": "Boolean",
            "default": "true",
            "class": "stopwatch",
            "module": "Output"
        },
        {
            "file": "src/widgets/output/stopwatch.js",
            "line": 21,
            "description": "Whether the widget should operate in an 'increasing' mode (a stopwatch)\nor in a 'decreasing' mode (a timer).",
            "itemtype": "property",
            "name": "direction",
            "type": "String",
            "default": "'decreasing'",
            "class": "stopwatch",
            "module": "Output"
        },
        {
            "file": "src/widgets/output/stopwatch.js",
            "line": 30,
            "description": "Disable the pickList widget",
            "itemtype": "property",
            "name": "disabled",
            "type": "Boolean",
            "default": "false",
            "class": "stopwatch",
            "module": "Output"
        },
        {
            "file": "src/widgets/output/stopwatch.js",
            "line": 38,
            "description": "Whether to display the progressbar when operating in the 'decreasing' direction",
            "itemtype": "property",
            "name": "autostart",
            "type": "Boolean",
            "default": "true",
            "class": "stopwatch",
            "module": "Output"
        },
        {
            "file": "src/widgets/output/stopwatch.js",
            "line": 46,
            "description": "The amount by which to increment the stopwatch.  Value is given in milliseconds",
            "itemtype": "property",
            "name": "header",
            "type": "String",
            "default": "'100'",
            "class": "stopwatch",
            "module": "Output"
        },
        {
            "file": "src/widgets/output/stopwatch.js",
            "line": 54,
            "description": "Fired after the widget is created",
            "itemtype": "event",
            "name": "create",
            "class": "stopwatch",
            "module": "Output"
        },
        {
            "file": "src/widgets/output/stopwatch.js",
            "line": 60,
            "description": "Fired when the stopwatch starts",
            "itemtype": "event",
            "name": "start",
            "class": "stopwatch",
            "module": "Output"
        },
        {
            "file": "src/widgets/output/stopwatch.js",
            "line": 66,
            "description": "Fired when the stopwatch stops",
            "itemtype": "event",
            "name": "stop",
            "class": "stopwatch",
            "module": "Output"
        },
        {
            "file": "src/widgets/output/stopwatch.js",
            "line": 72,
            "description": "Fired when the stopwatch is reset",
            "itemtype": "event",
            "name": "reset",
            "class": "stopwatch",
            "module": "Output"
        },
        {
            "file": "src/widgets/output/stopwatch.js",
            "line": 78,
            "description": "Fired after the widget is destroyed",
            "itemtype": "event",
            "name": "destroy",
            "class": "stopwatch",
            "module": "Output"
        },
        {
            "file": "src/widgets/output/stopwatch.js",
            "line": 98,
            "description": "Start the stopwatch",
            "itemtype": "method",
            "name": "start",
            "chainable": 1,
            "class": "stopwatch",
            "module": "Output"
        },
        {
            "file": "src/widgets/output/stopwatch.js",
            "line": 111,
            "description": "Resume from a paused state",
            "itemtype": "method",
            "name": "resume",
            "chainable": 1,
            "class": "stopwatch",
            "module": "Output"
        },
        {
            "file": "src/widgets/output/stopwatch.js",
            "line": 121,
            "description": "Pause the stopwatch",
            "itemtype": "method",
            "name": "pause",
            "chainable": 1,
            "class": "stopwatch",
            "module": "Output"
        },
        {
            "file": "src/widgets/output/stopwatch.js",
            "line": 131,
            "description": "Stop the stopwatch, set the digits to 0",
            "itemtype": "method",
            "name": "stop",
            "chainable": 1,
            "class": "stopwatch",
            "module": "Output"
        },
        {
            "file": "src/widgets/output/stopwatch.js",
            "line": 142,
            "description": "Stop the stopwatch, set the digits back to its initial value",
            "itemtype": "method",
            "name": "reset",
            "chainable": 1,
            "class": "stopwatch",
            "module": "Output"
        },
        {
            "file": "src/widgets/output/stopwatch.js",
            "line": 156,
            "description": "Return true if the stopwatch is currently incrementing",
            "itemtype": "method",
            "name": "isRunning",
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "stopwatch",
            "module": "Output"
        },
        {
            "file": "src/widgets/output/stopwatch.js",
            "line": 166,
            "description": "A getter/setter for the stopwatch digits",
            "itemtype": "method",
            "name": "digits",
            "params": [
                {
                    "name": "value",
                    "description": ""
                }
            ],
            "return": {
                "description": "",
                "type": "Number"
            },
            "class": "stopwatch",
            "module": "Output"
        },
        {
            "file": "src/widgets/select/ordering-list.js",
            "line": 12,
            "description": "Disable the orderingList widget",
            "itemtype": "property",
            "name": "disabled",
            "type": "Boolean",
            "default": "false",
            "class": "orderingList",
            "module": "Select"
        },
        {
            "file": "src/widgets/select/ordering-list.js",
            "line": 20,
            "description": "The text to use for the orderingList header",
            "itemtype": "property",
            "name": "header",
            "type": "String",
            "class": "orderingList",
            "module": "Select"
        },
        {
            "file": "src/widgets/select/ordering-list.js",
            "line": 27,
            "description": "The height of the orderingList\n\n1. A String with appropriate units, eg.:\n       height: '120px'\n\n2. An integer without any units, in which case the units of `px` are assumed.\n       height: 120",
            "itemtype": "property",
            "name": "height",
            "type": "String",
            "class": "orderingList",
            "module": "Select"
        },
        {
            "file": "src/widgets/select/ordering-list.js",
            "line": 40,
            "description": "The minimum height of the orderingList\n\n1. A String with appropriate units, eg.:\n       heightMin: '120px'\n\n2. An integer without any units, in which case the units of `px` are assumed:\n       heightMin: 120",
            "itemtype": "property",
            "name": "heightMin",
            "type": "String",
            "class": "orderingList",
            "module": "Select"
        },
        {
            "file": "src/widgets/select/ordering-list.js",
            "line": 53,
            "description": "The maximum height of the orderingList\n\n1. A String with appropriate units, eg.:\n       heightMax: '120px'\n\n2. An integer without any units, in which case the units of `px` are assumed:\n       heightMax: 120",
            "itemtype": "property",
            "name": "heightMax",
            "type": "String",
            "class": "orderingList",
            "module": "Select"
        },
        {
            "file": "src/widgets/select/ordering-list.js",
            "line": 66,
            "description": "A CSS class to be added to the orderingList.\nMultiple classes should be space separated",
            "itemtype": "property",
            "name": "styleClass",
            "type": "String",
            "class": "orderingList",
            "module": "Select"
        },
        {
            "file": "src/widgets/select/ordering-list.js",
            "line": 74,
            "description": "When _table_ layout is used,\n_columnClasses_ specifies a comma-delimited list of CSS style classes to apply to each column.\nA space separated list of classes may be specified for an individual column.\n\nIf the number of classes in this list is less than the number of column children, then no class will be\napplied to the columns greater than the number of classes.  If however the final class in the list is the `*`\ncharacter, the classes will instead be applied in a repeating manner every n-fold column, where n is the order\nthe class in this list.\n\n If there are more class names than columns, the overflow ones are ignored.",
            "itemtype": "property",
            "name": "columnClasses",
            "type": "String",
            "class": "orderingList",
            "module": "Select"
        },
        {
            "file": "src/widgets/select/ordering-list.js",
            "line": 90,
            "description": "When true, show the buttons for ordering the selected elements",
            "itemtype": "property",
            "name": "showButtons",
            "type": "Boolean",
            "default": "true",
            "class": "orderingList",
            "module": "Select"
        },
        {
            "file": "src/widgets/select/ordering-list.js",
            "line": 98,
            "description": "Text to be applied to the ordering buttons of the ordering list.  The text should be arranged as an object in\nJSON notation.\n\neg. {first: ..., up: ..., down: ..., last: ...}",
            "itemtype": "property",
            "name": "buttonsText",
            "type": "JSON",
            "default": "null",
            "class": "orderingList",
            "module": "Select"
        },
        {
            "file": "src/widgets/select/ordering-list.js",
            "line": 109,
            "description": "When true, it is not possible to move a selected element outside of the orderingList",
            "itemtype": "property",
            "name": "contained",
            "type": "Boolean",
            "default": "true",
            "class": "orderingList",
            "module": "Select"
        },
        {
            "file": "src/widgets/select/ordering-list.js",
            "line": 117,
            "description": "When true dragging the mouse over the elements selects multiple elements.  This also reduces the drag handle\nused to re-order the elements.",
            "itemtype": "property",
            "name": "dragSelect",
            "type": "Boolean",
            "default": "true",
            "class": "orderingList",
            "module": "Select"
        },
        {
            "file": "src/widgets/select/ordering-list.js",
            "line": 126,
            "description": "Allows elements to be dragged onto an empty list when true",
            "itemtype": "property",
            "name": "dropOnEmpty",
            "type": "Boolean",
            "default": "true",
            "class": "orderingList",
            "module": "Select"
        },
        {
            "file": "src/widgets/select/ordering-list.js",
            "line": 134,
            "description": "Allows elements to be ordered by drag and drop with the mouse when true",
            "itemtype": "property",
            "name": "mouseOrderable",
            "type": "Boolean",
            "default": "true",
            "class": "orderingList",
            "module": "Select"
        },
        {
            "file": "src/widgets/select/ordering-list.js",
            "line": 143,
            "description": "Function used to sort the elements after an item has been added to the list.\n`sortFunction` must meet the API requirements of the compareFunction for the\n[Array.prototype.sort](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/sort)\nmethod.",
            "itemtype": "property",
            "name": "sortFunction",
            "type": "Function",
            "class": "orderingList",
            "module": "Select"
        },
        {
            "file": "src/widgets/select/ordering-list.js",
            "line": 156,
            "description": "Fired when the target list of the orderingList changes values.",
            "itemtype": "event",
            "name": "change",
            "class": "orderingList",
            "module": "Select"
        },
        {
            "file": "src/widgets/select/ordering-list.js",
            "line": 162,
            "description": "Fired after the dynamically created DOM elements of the orderingList have been created",
            "itemtype": "event",
            "name": "addDomElements",
            "class": "orderingList",
            "module": "Select"
        },
        {
            "file": "src/widgets/select/ordering-list.js",
            "line": 168,
            "description": "Fired after the orderingList has been created",
            "itemtype": "event",
            "name": "create",
            "class": "orderingList",
            "module": "Select"
        },
        {
            "file": "src/widgets/select/ordering-list.js",
            "line": 174,
            "description": "Fired after the orderingList has been destroyed",
            "itemtype": "event",
            "name": "destroy",
            "class": "orderingList",
            "module": "Select"
        },
        {
            "file": "src/widgets/select/ordering-list.js",
            "line": 180,
            "description": "Fired when the orderingList receives focus",
            "itemtype": "event",
            "name": "focus",
            "class": "orderingList",
            "module": "Select"
        },
        {
            "file": "src/widgets/select/ordering-list.js",
            "line": 186,
            "description": "Fired when the orderingList loses focus",
            "itemtype": "event",
            "name": "blur",
            "class": "orderingList",
            "module": "Select"
        },
        {
            "file": "src/widgets/select/ordering-list.js",
            "line": 366,
            "class": "orderingList",
            "module": "Select"
        },
        {
            "file": "src/widgets/select/ordering-list.js",
            "line": 368,
            "description": "Connect the orderingList with another orderingList, allowing items to be dragged between them.",
            "params": [
                {
                    "name": "target",
                    "description": "The orderingList with which to connect.",
                    "type": "Object"
                }
            ],
            "itemtype": "method",
            "name": "connectWith",
            "chainable": 1,
            "class": "orderingList",
            "module": "Select"
        },
        {
            "file": "src/widgets/select/ordering-list.js",
            "line": 386,
            "description": "Determine if the given item is selected",
            "itemtype": "method",
            "name": "isSelected",
            "params": [
                {
                    "name": "item",
                    "description": "jQuery object of one of the orderingList elements",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "True if the item is selected, false otherwise",
                "type": "Boolean"
            },
            "class": "orderingList",
            "module": "Select"
        },
        {
            "file": "src/widgets/select/ordering-list.js",
            "line": 397,
            "description": "Find and return the list of orderingList elements that are selected",
            "itemtype": "method",
            "name": "getSelected",
            "return": {
                "description": "A jQuery list of selected items",
                "type": "Object"
            },
            "class": "orderingList",
            "module": "Select"
        },
        {
            "file": "src/widgets/select/ordering-list.js",
            "line": 407,
            "description": "Select the given item",
            "itemtype": "method",
            "name": "selectItem",
            "params": [
                {
                    "name": "item",
                    "description": "jQuery object of the orderingList element to select",
                    "type": "Object"
                }
            ],
            "chainable": 1,
            "class": "orderingList",
            "module": "Select"
        },
        {
            "file": "src/widgets/select/ordering-list.js",
            "line": 419,
            "description": "Un-select the given item",
            "itemtype": "method",
            "name": "unSelectItem",
            "params": [
                {
                    "name": "item",
                    "description": "jQuery object of the orderingList element to un-select",
                    "type": "Object"
                }
            ],
            "chainable": 1,
            "class": "orderingList",
            "module": "Select"
        },
        {
            "file": "src/widgets/select/ordering-list.js",
            "line": 431,
            "description": "Select all items in the orderingList",
            "itemtype": "method",
            "name": "selectAll",
            "chainable": 1,
            "class": "orderingList",
            "module": "Select"
        },
        {
            "file": "src/widgets/select/ordering-list.js",
            "line": 442,
            "description": "Un-select all items in the orderingList",
            "itemtype": "method",
            "name": "unSelectAll",
            "chainable": 1,
            "class": "orderingList",
            "module": "Select"
        },
        {
            "file": "src/widgets/select/ordering-list.js",
            "line": 453,
            "description": "Move the given items to the top of the orderingList",
            "itemtype": "method",
            "name": "moveFirst",
            "params": [
                {
                    "name": "items",
                    "description": "the items to move to the top",
                    "type": "Object"
                },
                {
                    "name": "event",
                    "description": "the event used that triggered this movement",
                    "type": "Object",
                    "optional": true,
                    "optdefault": "null"
                }
            ],
            "chainable": 1,
            "class": "orderingList",
            "module": "Select"
        },
        {
            "file": "src/widgets/select/ordering-list.js",
            "line": 479,
            "description": "Move the given items up one step in the orderingList",
            "itemtype": "method",
            "name": "moveUp",
            "params": [
                {
                    "name": "items",
                    "description": "the items to move up",
                    "type": "Object",
                    "optional": true
                },
                {
                    "name": "event",
                    "description": "the event used that triggered this movement",
                    "type": "Object",
                    "optional": true,
                    "optdefault": "null"
                }
            ],
            "chainable": 1,
            "class": "orderingList",
            "module": "Select"
        },
        {
            "file": "src/widgets/select/ordering-list.js",
            "line": 510,
            "description": "Move the given items down one step in the orderingList",
            "itemtype": "method",
            "name": "moveDown",
            "params": [
                {
                    "name": "items",
                    "description": "the items to move down",
                    "type": "Object",
                    "optional": true
                },
                {
                    "name": "event",
                    "description": "the event used that triggered this movement",
                    "type": "Object",
                    "optional": true,
                    "optdefault": "null"
                }
            ],
            "chainable": 1,
            "class": "orderingList",
            "module": "Select"
        },
        {
            "file": "src/widgets/select/ordering-list.js",
            "line": 543,
            "description": "Move the given items to the end of the orderingList",
            "itemtype": "method",
            "name": "moveLast",
            "params": [
                {
                    "name": "items",
                    "description": "the items to move to the end",
                    "type": "Object",
                    "optional": true
                },
                {
                    "name": "event",
                    "description": "the event used that triggered this movement",
                    "type": "Object",
                    "optional": true,
                    "optdefault": "null"
                }
            ],
            "chainable": 1,
            "class": "orderingList",
            "module": "Select"
        },
        {
            "file": "src/widgets/select/ordering-list.js",
            "line": 569,
            "description": "Remove the given items from the orderingList",
            "itemtype": "method",
            "name": "remove",
            "params": [
                {
                    "name": "items",
                    "description": "the items to remove",
                    "type": "Object",
                    "optional": true
                }
            ],
            "return": {
                "description": "the items removed from the orderingList",
                "type": "Object"
            },
            "class": "orderingList",
            "module": "Select"
        },
        {
            "file": "src/widgets/select/ordering-list.js",
            "line": 588,
            "description": "Add the given items to the orderingList",
            "itemtype": "method",
            "name": "add",
            "params": [
                {
                    "name": "items",
                    "description": "the items to add",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "the items added to the orderingList",
                "type": "Object"
            },
            "class": "orderingList",
            "module": "Select"
        },
        {
            "file": "src/widgets/select/ordering-list.js",
            "line": 607,
            "description": "Retrieve the jQuery list of all items in the orderingList",
            "itemtype": "method",
            "name": "getOrderedElements",
            "return": {
                "description": "the jQuery list of selected elements",
                "type": "Object"
            },
            "class": "orderingList",
            "module": "Select"
        },
        {
            "file": "src/widgets/select/ordering-list.js",
            "line": 617,
            "description": "Retrieve the keys of all items in the orderingList",
            "itemtype": "method",
            "name": "getOrderedKeys",
            "return": {
                "description": "An array of the keys of the selected elements",
                "type": "Array"
            },
            "class": "orderingList",
            "module": "Select"
        },
        {
            "file": "src/widgets/select/ordering-list.js",
            "line": 627,
            "description": "Removes the ordering list functionality completely. This will return the element back to its pre-init state.",
            "itemtype": "method",
            "name": "destroy",
            "class": "orderingList",
            "module": "Select"
        },
        {
            "file": "src/widgets/select/ordering-list.js",
            "line": 781,
            "class": "orderingList",
            "module": "Select"
        },
        {
            "file": "src/widgets/select/ordering-list.js",
            "line": 1017,
            "description": "A dump of the current state of the widget",
            "itemtype": "method",
            "name": "_uiHash",
            "access": "private",
            "tagname": "",
            "return": {
                "description": "A `ui` object holding the current state.  The `ui` object has the properties:\n````javascript\n{\n  change: 'move'| 'add' | 'remove',\n  movement: 'drag' | 'moveUp' | 'moveFirst' | 'moveDown' | 'moveLast'\n}\n````",
                "type": "Object"
            },
            "class": "orderingList",
            "module": "Select"
        },
        {
            "file": "src/widgets/select/ordering-list.js",
            "line": 1037,
            "class": "orderingList",
            "module": "Select"
        },
        {
            "file": "src/widgets/select/ordering-list.js",
            "line": 1094,
            "class": "orderingList",
            "module": "Select"
        },
        {
            "file": "src/widgets/select/pick-list.js",
            "line": 12,
            "description": "Disable the pickList widget",
            "itemtype": "property",
            "name": "disabled",
            "type": "Boolean",
            "default": "false",
            "class": "pickList",
            "module": "Select"
        },
        {
            "file": "src/widgets/select/pick-list.js",
            "line": 20,
            "description": "The text to use for the pickList header",
            "itemtype": "property",
            "name": "header",
            "type": "String",
            "class": "pickList",
            "module": "Select"
        },
        {
            "file": "src/widgets/select/pick-list.js",
            "line": 27,
            "description": "The text to use for the source header of the pickList",
            "itemtype": "property",
            "name": "sourceHeader",
            "type": "String",
            "class": "pickList",
            "module": "Select"
        },
        {
            "file": "src/widgets/select/pick-list.js",
            "line": 34,
            "description": "The text to use for the target header of the pickList",
            "itemtype": "property",
            "name": "targetHeader",
            "type": "String",
            "class": "pickList",
            "module": "Select"
        },
        {
            "file": "src/widgets/select/pick-list.js",
            "line": 41,
            "description": "The height of the pickList.\nSpecify the value as either:\n\n1. A String with appropriate units, eg.:\n       height: '120px'\n\n2. An integer without any units, in which case the units of `px` are assumed:\n       height: 120",
            "itemtype": "property",
            "name": "height",
            "type": "String",
            "class": "pickList",
            "module": "Select"
        },
        {
            "file": "src/widgets/select/pick-list.js",
            "line": 55,
            "description": "The minimum height of the pickList.\nSpecify the value as either:\n\n1. A String with appropriate units, eg.:\n       heightMin: '120px'\n\n2. An integer without any units, in which case the units of `px` are assumed:\n       heightMin: 120",
            "itemtype": "property",
            "name": "heightMin",
            "type": "String",
            "class": "pickList",
            "module": "Select"
        },
        {
            "file": "src/widgets/select/pick-list.js",
            "line": 69,
            "description": "The maximum height of the pickList\nSpecify the value as either:\n\n1. A String with appropriate units, eg.:\n       heightMax: '120px'\n\n2. An integer without any units, in which case the units of `px` are assumed:\n       heightMax: 120",
            "itemtype": "property",
            "name": "heightMax",
            "type": "String",
            "class": "pickList",
            "module": "Select"
        },
        {
            "file": "src/widgets/select/pick-list.js",
            "line": 83,
            "description": "A CSS class to be added to the pickList.\nMultiple classes should be space separated",
            "itemtype": "property",
            "name": "styleClass",
            "type": "String",
            "class": "pickList",
            "module": "Select"
        },
        {
            "file": "src/widgets/select/pick-list.js",
            "line": 91,
            "description": "/**\n* When _table_ layout is used,\n* _columnClasses_ specifies a comma-delimited list of CSS style classes to apply to each column.\n* A space separated list of classes may be specified for an individual column.\n*\n* If the number of classes in this list is less than the number of column children, then no class will be\n* applied to the columns greater than the number of classes.  If however the final class in the list is the `*`\n* character, the classes will instead be applied in a repeating manner every n-fold column, where n is the order\n* the class in this list.\n*\n*  If there are more class names than columns, the overflow ones are ignored.\n*\n* @property columnClasses\n* @type String",
            "class": "pickList",
            "module": "Select"
        },
        {
            "file": "src/widgets/select/pick-list.js",
            "line": 108,
            "description": "When true, clicking on a pickList element will move it between the source and target lists",
            "itemtype": "property",
            "name": "switchByClick",
            "type": "Boolean",
            "default": "false",
            "class": "pickList",
            "module": "Select"
        },
        {
            "file": "src/widgets/select/pick-list.js",
            "line": 116,
            "description": "When true, double-clicking on a pickList element will move it between the source and target lists",
            "itemtype": "property",
            "name": "switchByDblClick",
            "type": "Boolean",
            "default": "true",
            "class": "pickList",
            "module": "Select"
        },
        {
            "file": "src/widgets/select/pick-list.js",
            "line": 124,
            "description": "When true, elements in the target list can be re-ordered",
            "itemtype": "property",
            "name": "orderable",
            "type": "Boolean",
            "default": "true",
            "class": "pickList",
            "module": "Select"
        },
        {
            "file": "src/widgets/select/pick-list.js",
            "line": 132,
            "description": "Text to be applied to the ordering buttons of the target list.  The text should be arranged as an object in\nJSON notation.\n\neg. {first: ..., up: ..., down: ..., last: ...}",
            "itemtype": "property",
            "name": "orderButtonsText",
            "type": "JSON",
            "default": "null",
            "class": "pickList",
            "module": "Select"
        },
        {
            "file": "src/widgets/select/pick-list.js",
            "line": 143,
            "description": "Text to be applied to the picking buttons of the picklist.  The text should be arranged as an object in\nJSON notation.\n\neg. {addAll: ..., add: ..., remove: ..., removeAll: ...}",
            "itemtype": "property",
            "name": "pickButtonsText",
            "type": "JSON",
            "default": "null",
            "class": "pickList",
            "module": "Select"
        },
        {
            "file": "src/widgets/select/pick-list.js",
            "line": 155,
            "description": "Function used to sort the elements after an item has been added to either the source or target list.\n`sortFunction` must meet the API requirements of the compareFunction for the\n[Array.prototype.sort](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/sort)\nmethod.",
            "itemtype": "property",
            "name": "sortFunction",
            "type": "Function",
            "class": "pickList",
            "module": "Select"
        },
        {
            "file": "src/widgets/select/pick-list.js",
            "line": 168,
            "description": "Fired when the target list of the pickList changes values.",
            "itemtype": "event",
            "name": "change",
            "class": "pickList",
            "module": "Select"
        },
        {
            "file": "src/widgets/select/pick-list.js",
            "line": 174,
            "description": "Fired after the dynamically created DOM elements of the pickList have been created",
            "itemtype": "event",
            "name": "addDomElements",
            "class": "pickList",
            "module": "Select"
        },
        {
            "file": "src/widgets/select/pick-list.js",
            "line": 180,
            "description": "Fired after the pickList has been created",
            "itemtype": "event",
            "name": "create",
            "class": "pickList",
            "module": "Select"
        },
        {
            "file": "src/widgets/select/pick-list.js",
            "line": 186,
            "description": "Fired after the pickList has been destroyed",
            "itemtype": "event",
            "name": "destroy",
            "class": "pickList",
            "module": "Select"
        },
        {
            "file": "src/widgets/select/pick-list.js",
            "line": 192,
            "description": "Fired when the pickList receives focus",
            "itemtype": "event",
            "name": "focus",
            "class": "pickList",
            "module": "Select"
        },
        {
            "file": "src/widgets/select/pick-list.js",
            "line": 198,
            "description": "Fired when the pickList loses focus",
            "itemtype": "event",
            "name": "blur",
            "class": "pickList",
            "module": "Select"
        },
        {
            "file": "src/widgets/select/pick-list.js",
            "line": 271,
            "class": "pickList",
            "module": "Select"
        },
        {
            "file": "src/widgets/select/pick-list.js",
            "line": 273,
            "description": "Move items from the source list of the pickList to the target list.",
            "params": [
                {
                    "name": "items",
                    "description": "A list of Elements to remove from the source list of the pickList.  If no items are specified,\nthe selected sourceList items are used.",
                    "type": "Object",
                    "optional": true
                },
                {
                    "name": "event",
                    "description": "The event that triggered the movement of the elements.  This event will be made accessible\nwhen the resulting change event is fired.",
                    "type": "Object",
                    "optional": true,
                    "optdefault": "null"
                }
            ],
            "itemtype": "method",
            "name": "addItems",
            "chainable": 1,
            "class": "pickList",
            "module": "Select"
        },
        {
            "file": "src/widgets/select/pick-list.js",
            "line": 293,
            "description": "Move all items from the source list of the pickList to the target list.",
            "params": [
                {
                    "name": "event",
                    "description": "The event that triggered the movement of the elements.  This event will be made accessible\nwhen the resulting change event is fired.",
                    "type": "Object",
                    "optional": true,
                    "optdefault": "null"
                }
            ],
            "itemtype": "method",
            "name": "addAllItems",
            "chainable": 1,
            "class": "pickList",
            "module": "Select"
        },
        {
            "file": "src/widgets/select/pick-list.js",
            "line": 308,
            "description": "Move items from the target list of the pickList to the source list.",
            "params": [
                {
                    "name": "items",
                    "description": "A list of Elements to remove from the target list of the pickList  If no items are specified,\nthe selected targetList items are used.",
                    "type": "Object"
                },
                {
                    "name": "event",
                    "description": "The event that triggered the movement of the elements.  This event will be made accessible\nwhen the resulting change event is fired.",
                    "type": "Object",
                    "optional": true,
                    "optdefault": "null"
                }
            ],
            "itemtype": "method",
            "name": "removeItems",
            "chainable": 1,
            "class": "pickList",
            "module": "Select"
        },
        {
            "file": "src/widgets/select/pick-list.js",
            "line": 329,
            "description": "Move all items from the target list of the pickList to the source list.",
            "params": [
                {
                    "name": "event",
                    "description": "The event that triggered the movement of the elements.  This event will be made accessible\nwhen the resulting change event is fired.",
                    "type": "Object",
                    "optional": true,
                    "optdefault": "null"
                }
            ],
            "itemtype": "method",
            "name": "removeAllItems",
            "chainable": 1,
            "class": "pickList",
            "module": "Select"
        },
        {
            "file": "src/widgets/select/pick-list.js",
            "line": 352,
            "description": "Removes the pick list functionality completely. This will return the element back to its pre-init state.",
            "itemtype": "method",
            "name": "destroy",
            "class": "pickList",
            "module": "Select"
        },
        {
            "file": "src/widgets/select/pick-list.js",
            "line": 360,
            "class": "pickList",
            "module": "Select"
        },
        {
            "file": "src/widgets/select/pick-list.js",
            "line": 656,
            "class": "pickList",
            "module": "Select"
        },
        {
            "file": "src/widgets/select/pick-list.js",
            "line": 666,
            "class": "pickList",
            "module": "Select"
        },
        {
            "file": "src/widgets/table/data-table.js",
            "line": 15,
            "description": "Fired when a sortable header is clicked.  A sortable header is a <th> element with the class 'sort' in <thead>.",
            "itemtype": "event",
            "name": "sort",
            "class": "dataTable",
            "module": "Table"
        },
        {
            "file": "src/widgets/table/data-table.js",
            "line": 23,
            "description": "Fired when a filterable element header is changed.  A filterable element is one marked with the class 'filter' in <thead>.",
            "itemtype": "event",
            "name": "filter",
            "class": "dataTable",
            "module": "Table"
        },
        {
            "file": "src/widgets/table/sub-table.js",
            "line": 13,
            "description": "Fired to request expansion or collapse os the sub-table",
            "itemtype": "event",
            "name": "expand",
            "class": "subTable",
            "module": "Table"
        }
    ],
    "warnings": [
        {
            "message": "unknown tag: override",
            "line": " src/widgets/input/autocomplete.js:207"
        },
        {
            "message": "unknown tag: override",
            "line": " src/widgets/input/autocomplete.js:445"
        },
        {
            "message": "unknown tag: override",
            "line": " src/widgets/input/autocomplete.js:452"
        },
        {
            "message": "unknown tag: override",
            "line": " src/widgets/input/autocomplete.js:462"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " src/widgets/input/editor.js:106"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " src/widgets/input/editor.js:116"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " src/widgets/input/editor.js:126"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " src/widgets/input/editor.js:136"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " src/widgets/output/stopwatch.js:156"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " src/widgets/output/stopwatch.js:166"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " src/widgets/select/ordering-list.js:386"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " src/widgets/select/ordering-list.js:397"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " src/widgets/select/ordering-list.js:569"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " src/widgets/select/ordering-list.js:588"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " src/widgets/select/ordering-list.js:607"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " src/widgets/select/ordering-list.js:617"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " src/widgets/select/ordering-list.js:1017"
        },
        {
            "message": "Missing item type",
            "line": " src/widgets/input/autocomplete.js:445"
        },
        {
            "message": "Missing item type",
            "line": " src/widgets/input/autocomplete.js:452"
        },
        {
            "message": "Missing item type",
            "line": " src/widgets/input/autocomplete.js:462"
        },
        {
            "message": "Missing item type\ncallbacks for important jQuery UI Autocomplete events that helps to handle extension functionality",
            "line": " src/widgets/input/autocomplete.js:488"
        },
        {
            "message": "Missing item type\nDo not load config as it is loaded manually",
            "line": " src/widgets/input/editor.js:31"
        },
        {
            "message": "Missing item type\nLabels are mapped to numbers 0,1,2...\nIf a chart consists of multiple series values(from all series) with the same label\nare mapped to the (one number 0,1,2..) space of width 1.\nbarWidth takes care of bars to not overlap",
            "line": " src/widgets/output/chart.js:297"
        },
        {
            "message": "Missing item type",
            "line": " src/widgets/select/ordering-list.js:366"
        },
        {
            "message": "Missing item type",
            "line": " src/widgets/select/ordering-list.js:781"
        },
        {
            "message": "Missing item type",
            "line": " src/widgets/select/ordering-list.js:1037"
        },
        {
            "message": "Missing item type",
            "line": " src/widgets/select/ordering-list.js:1094"
        },
        {
            "message": "Missing item type\n/**\n* When _table_ layout is used,\n* _columnClasses_ specifies a comma-delimited list of CSS style classes to apply to each column.\n* A space separated list of classes may be specified for an individual column.\n*\n* If the number of classes in this list is less than the number of column children, then no class will be\n* applied to the columns greater than the number of classes.  If however the final class in the list is the `*`\n* character, the classes will instead be applied in a repeating manner every n-fold column, where n is the order\n* the class in this list.\n*\n*  If there are more class names than columns, the overflow ones are ignored.\n*\n* @property columnClasses\n* @type String",
            "line": " src/widgets/select/pick-list.js:91"
        },
        {
            "message": "Missing item type",
            "line": " src/widgets/select/pick-list.js:271"
        },
        {
            "message": "Missing item type",
            "line": " src/widgets/select/pick-list.js:360"
        },
        {
            "message": "Missing item type",
            "line": " src/widgets/select/pick-list.js:656"
        },
        {
            "message": "Missing item type",
            "line": " src/widgets/select/pick-list.js:666"
        }
    ]
}